{"remainingRequest":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/thread-loader/dist/cjs.js!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/vue-apollo.js","dependencies":[{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/vue-apollo.js","mtime":1604689993743},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2Rhdmlkc2hlbi9EZXNrdG9wL0Jsb2NrQ2hhaW4vQmNoYXJpdHktVmVyc2lvbjIvZGF2aWQtTW9kaWZpZWQvYml0Y2hhcml0eS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9kYXZpZHNoZW4vRGVza3RvcC9CbG9ja0NoYWluL0JjaGFyaXR5LVZlcnNpb24yL2RhdmlkLU1vZGlmaWVkL2JpdGNoYXJpdHktZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7CmltcG9ydCBWdWVBcG9sbG8gZnJvbSAndnVlLWFwb2xsbyc7CmltcG9ydCB7IGNyZWF0ZUFwb2xsb0NsaWVudCwgcmVzdGFydFdlYnNvY2tldHMgfSBmcm9tICd2dWUtY2xpLXBsdWdpbi1hcG9sbG8vZ3JhcGhxbC1jbGllbnQnOyAvLyBJbnN0YWxsIHRoZSB2dWUgcGx1Z2luCgpWdWUudXNlKFZ1ZUFwb2xsbyk7IC8vIE5hbWUgb2YgdGhlIGxvY2FsU3RvcmFnZSBpdGVtCgp2YXIgQVVUSF9UT0tFTiA9ICdhcG9sbG8tdG9rZW4nOyAvLyBIdHRwIGVuZHBvaW50Cgp2YXIgaHR0cEVuZHBvaW50ID0gcHJvY2Vzcy5lbnYuVlVFX0FQUF9HUkFQSFFMX0hUVFAgfHwgJ2h0dHBzOi8vd2F4LmFwaS5hdG9taWNhc3NldHMuaW8vZ3JhcGhxbCc7IC8vIENvbmZpZwoKdmFyIGRlZmF1bHRPcHRpb25zID0gewogIC8vIFlvdSBjYW4gdXNlIGBodHRwc2AgZm9yIHNlY3VyZSBjb25uZWN0aW9uIChyZWNvbW1lbmRlZCBpbiBwcm9kdWN0aW9uKQogIGh0dHBFbmRwb2ludDogaHR0cEVuZHBvaW50LAogIC8vIFlvdSBjYW4gdXNlIGB3c3NgIGZvciBzZWN1cmUgY29ubmVjdGlvbiAocmVjb21tZW5kZWQgaW4gcHJvZHVjdGlvbikKICAvLyBVc2UgYG51bGxgIHRvIGRpc2FibGUgc3Vic2NyaXB0aW9ucwogIHdzRW5kcG9pbnQ6IHByb2Nlc3MuZW52LlZVRV9BUFBfR1JBUEhRTF9XUywKICAvLyd3czovL2xvY2FsaG9zdDo0MDAwL2dyYXBocWwnLCwKICAvLyBMb2NhbFN0b3JhZ2UgdG9rZW4KICB0b2tlbk5hbWU6IEFVVEhfVE9LRU4sCiAgLy8gRW5hYmxlIEF1dG9tYXRpYyBRdWVyeSBwZXJzaXN0aW5nIHdpdGggQXBvbGxvIEVuZ2luZQogIHBlcnNpc3Rpbmc6IGZhbHNlLAogIC8vIFVzZSB3ZWJzb2NrZXRzIGZvciBldmVyeXRoaW5nIChubyBIVFRQKQogIC8vIFlvdSBuZWVkIHRvIHBhc3MgYSBgd3NFbmRwb2ludGAgZm9yIHRoaXMgdG8gd29yawogIHdlYnNvY2tldHNPbmx5OiBmYWxzZSwKICAvLyBJcyBiZWluZyByZW5kZXJlZCBvbiB0aGUgc2VydmVyPwogIHNzcjogZmFsc2UgLy8gT3ZlcnJpZGUgZGVmYXVsdCBhcG9sbG8gbGluawogIC8vIG5vdGU6IGRvbid0IG92ZXJyaWRlIGh0dHBMaW5rIGhlcmUsIHNwZWNpZnkgaHR0cExpbmsgb3B0aW9ucyBpbiB0aGUKICAvLyBodHRwTGlua09wdGlvbnMgcHJvcGVydHkgb2YgZGVmYXVsdE9wdGlvbnMuCiAgLy8gbGluazogbXlMaW5rCiAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBjYWNoZQogIC8vIGNhY2hlOiBteUNhY2hlCiAgLy8gT3ZlcnJpZGUgdGhlIHdheSB0aGUgQXV0aG9yaXphdGlvbiBoZWFkZXIgaXMgc2V0CiAgLy8gZ2V0QXV0aDogKHRva2VuTmFtZSkgPT4gLi4uCiAgLy8gQWRkaXRpb25hbCBBcG9sbG9DbGllbnQgb3B0aW9ucwogIC8vIGFwb2xsbzogeyAuLi4gfQogIC8vIENsaWVudCBsb2NhbCBkYXRhIChzZWUgYXBvbGxvLWxpbmstc3RhdGUpCiAgLy8gY2xpZW50U3RhdGU6IHsgcmVzb2x2ZXJzOiB7IC4uLiB9LCBkZWZhdWx0czogeyAuLi4gfSB9Cgp9OyAvLyBDYWxsIHRoaXMgaW4gdGhlIFZ1ZSBhcHAgZmlsZQoKZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKCkgewogIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgLy8gQ3JlYXRlIGFwb2xsbyBjbGllbnQKICB2YXIgX2NyZWF0ZUFwb2xsb0NsaWVudCA9IGNyZWF0ZUFwb2xsb0NsaWVudChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucykpLAogICAgICBhcG9sbG9DbGllbnQgPSBfY3JlYXRlQXBvbGxvQ2xpZW50LmFwb2xsb0NsaWVudCwKICAgICAgd3NDbGllbnQgPSBfY3JlYXRlQXBvbGxvQ2xpZW50LndzQ2xpZW50OwoKICBhcG9sbG9DbGllbnQud3NDbGllbnQgPSB3c0NsaWVudDsgLy8gQ3JlYXRlIHZ1ZSBhcG9sbG8gcHJvdmlkZXIKCiAgdmFyIGFwb2xsb1Byb3ZpZGVyID0gbmV3IFZ1ZUFwb2xsbyh7CiAgICBkZWZhdWx0Q2xpZW50OiBhcG9sbG9DbGllbnQsCiAgICBkZWZhdWx0T3B0aW9uczogewogICAgICAkcXVlcnk6IHsvLyBmZXRjaFBvbGljeTogJ2NhY2hlLWFuZC1uZXR3b3JrJywKICAgICAgfQogICAgfSwKICAgIGVycm9ySGFuZGxlcjogZnVuY3Rpb24gZXJyb3JIYW5kbGVyKGVycm9yKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgICAgIGNvbnNvbGUubG9nKCclY0Vycm9yJywgJ2JhY2tncm91bmQ6IHJlZDsgY29sb3I6IHdoaXRlOyBwYWRkaW5nOiAycHggNHB4OyBib3JkZXItcmFkaXVzOiAzcHg7IGZvbnQtd2VpZ2h0OiBib2xkOycsIGVycm9yLm1lc3NhZ2UpOwogICAgfQogIH0pOwogIHJldHVybiBhcG9sbG9Qcm92aWRlcjsKfSAvLyBNYW51YWxseSBjYWxsIHRoaXMgd2hlbiB1c2VyIGxvZyBpbgoKZXhwb3J0IGZ1bmN0aW9uIG9uTG9naW4oX3gsIF94MikgewogIHJldHVybiBfb25Mb2dpbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9IC8vIE1hbnVhbGx5IGNhbGwgdGhpcyB3aGVuIHVzZXIgbG9nIG91dAoKZnVuY3Rpb24gX29uTG9naW4oKSB7CiAgX29uTG9naW4gPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoYXBvbGxvQ2xpZW50LCB0b2tlbikgewogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9rZW4pIHsKICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShBVVRIX1RPS0VOLCB0b2tlbik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChhcG9sbG9DbGllbnQud3NDbGllbnQpIHJlc3RhcnRXZWJzb2NrZXRzKGFwb2xsb0NsaWVudC53c0NsaWVudCk7CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIGFwb2xsb0NsaWVudC5yZXNldFN0b3JlKCk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDc7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMik7CiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCclY0Vycm9yIG9uIGNhY2hlIHJlc2V0IChsb2dpbiknLCAnY29sb3I6IG9yYW5nZTsnLCBfY29udGV4dC50MC5tZXNzYWdlKTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMiwgN11dKTsKICB9KSk7CiAgcmV0dXJuIF9vbkxvZ2luLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBvbkxvZ291dChfeDMpIHsKICByZXR1cm4gX29uTG9nb3V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9vbkxvZ291dCgpIHsKICBfb25Mb2dvdXQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGFwb2xsb0NsaWVudCkgewogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oQVVUSF9UT0tFTik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChhcG9sbG9DbGllbnQud3NDbGllbnQpIHJlc3RhcnRXZWJzb2NrZXRzKGFwb2xsb0NsaWVudC53c0NsaWVudCk7CiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMjsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gYXBvbGxvQ2xpZW50LnJlc2V0U3RvcmUoKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTA7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMik7CiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCclY0Vycm9yIG9uIGNhY2hlIHJlc2V0IChsb2dvdXQpJywgJ2NvbG9yOiBvcmFuZ2U7JywgX2NvbnRleHQyLnQwLm1lc3NhZ2UpOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzIsIDddXSk7CiAgfSkpOwogIHJldHVybiBfb25Mb2dvdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},{"version":3,"sources":["/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/vue-apollo.js"],"names":["Vue","VueApollo","createApolloClient","restartWebsockets","use","AUTH_TOKEN","httpEndpoint","process","env","VUE_APP_GRAPHQL_HTTP","defaultOptions","wsEndpoint","VUE_APP_GRAPHQL_WS","tokenName","persisting","websocketsOnly","ssr","createProvider","options","apolloClient","wsClient","apolloProvider","defaultClient","$query","errorHandler","error","console","log","message","onLogin","token","localStorage","setItem","resetStore","onLogout","removeItem"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport VueApollo from 'vue-apollo'\nimport { createApolloClient, restartWebsockets } from 'vue-cli-plugin-apollo/graphql-client'\n\n// Install the vue plugin\nVue.use(VueApollo)\n\n// Name of the localStorage item\nconst AUTH_TOKEN = 'apollo-token'\n\n// Http endpoint\nconst httpEndpoint = process.env.VUE_APP_GRAPHQL_HTTP || 'https://wax.api.atomicassets.io/graphql'\n\n// Config\nconst defaultOptions = {\n  // You can use `https` for secure connection (recommended in production)\n  httpEndpoint,\n  // You can use `wss` for secure connection (recommended in production)\n  // Use `null` to disable subscriptions\n  wsEndpoint: process.env.VUE_APP_GRAPHQL_WS , //'ws://localhost:4000/graphql',,\n  // LocalStorage token\n  tokenName: AUTH_TOKEN,\n  // Enable Automatic Query persisting with Apollo Engine\n  persisting: false,\n  // Use websockets for everything (no HTTP)\n  // You need to pass a `wsEndpoint` for this to work\n  websocketsOnly: false,\n  // Is being rendered on the server?\n  ssr: false,\n\n  // Override default apollo link\n  // note: don't override httpLink here, specify httpLink options in the\n  // httpLinkOptions property of defaultOptions.\n  // link: myLink\n\n  // Override default cache\n  // cache: myCache\n\n  // Override the way the Authorization header is set\n  // getAuth: (tokenName) => ...\n\n  // Additional ApolloClient options\n  // apollo: { ... }\n\n  // Client local data (see apollo-link-state)\n  // clientState: { resolvers: { ... }, defaults: { ... } }\n}\n\n// Call this in the Vue app file\nexport function createProvider (options = {}) {\n  // Create apollo client\n  const { apolloClient, wsClient } = createApolloClient({\n    ...defaultOptions,\n    ...options,\n  })\n  apolloClient.wsClient = wsClient\n\n  // Create vue apollo provider\n  const apolloProvider = new VueApollo({\n    defaultClient: apolloClient,\n    defaultOptions: {\n      $query: {\n        // fetchPolicy: 'cache-and-network',\n      },\n    },\n    errorHandler (error) {\n      // eslint-disable-next-line no-console\n      console.log('%cError', 'background: red; color: white; padding: 2px 4px; border-radius: 3px; font-weight: bold;', error.message)\n    },\n  })\n\n  return apolloProvider\n}\n\n// Manually call this when user log in\nexport async function onLogin (apolloClient, token) {\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem(AUTH_TOKEN, token)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (login)', 'color: orange;', e.message)\n  }\n}\n\n// Manually call this when user log out\nexport async function onLogout (apolloClient) {\n  if (typeof localStorage !== 'undefined') {\n    localStorage.removeItem(AUTH_TOKEN)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (logout)', 'color: orange;', e.message)\n  }\n}\n"]}]}