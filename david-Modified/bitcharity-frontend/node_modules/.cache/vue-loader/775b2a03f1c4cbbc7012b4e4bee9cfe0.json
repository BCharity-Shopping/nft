{"remainingRequest":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/SchemaInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/SchemaInfo.vue","mtime":1605554539776},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JwpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOidTY2hlbWFJbmZvJywKICAgIAogICAgZGF0YSgpewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHNjaGVtYV9uYW1lOiAiIiwKICAgICAgICAgICAgY29sbGVjdGlvbl9uYW1lOiIiLAogICAgICAgIH0KICAgIH0sCiAgICBjcmVhdGVkKCkgewogICAgICB0aGlzLnNjaGVtYV9uYW1lPXRoaXMuJHJvdXRlLnBhcmFtcy5zY2hlbWFuYW1lOwogICAgICBjb25zb2xlLmxvZyh0aGlzLnNjaGVtYV9uYW1lKTsKICAgICAgdGhpcy5jb2xsZWN0aW9uX25hbWUgPSB0aGlzLiRyb3V0ZS5wYXJhbXMuY29sbGVjdGlvbm5hbWU7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29sbGVjdGlvbl9uYW1lKTsKICAgICAgfSwKICAgIGNvbXB1dGVkOiB7CiAgICAgIC4uLm1hcEdldHRlcnMoWwogICAgICAgICdnZXRXYXgnCiAgICAgIF0pLAogICAgICBzY2hlbWFuYW1lczpmdW5jdGlvbigpewogICAgICAgICAgcmV0dXJuIHRoaXMuc2NoZW1hX25hbWUKICAgICAgfSwKICAgICAgY29sbGVjdGlvbm5hbWVzOmZ1bmN0aW9uKCl7CiAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9ubmFtZQogICAgICB9CiAgICB9Cn0K"},{"version":3,"sources":["SchemaInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SchemaInfo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        Schema:{{this.schema_name}}\n        collectionname:{{this.collection_name}}\n         <ApolloQuery :query=\"require('../graphQL/schemaDetails.gql')\" :variables=\"{schema_name:this.schema_name}\">\n            <template v-slot=\"{ result: { data } }\">\n                {{data}}\n            <div v-for=\"(item) in data.atomicassets_schemas_aggregate.nodes[0].format\" :key=\"item.name\">\n                            {{item.name}}:{{item.type}}\n            </div>\n            </template>\n            </ApolloQuery> \n        <button class=\"btn btn-primary\" @click=\"$router.push({path:`/creator/${collection_name}/schema/${schema_name}/CreateAssets`})\">Details</button>&nbsp;&nbsp;\n    </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex'\nexport default {\n    name:'SchemaInfo',\n    \n    data(){\n        return {\n            schema_name: \"\",\n            collection_name:\"\",\n        }\n    },\n    created() {\n      this.schema_name=this.$route.params.schemaname;\n      console.log(this.schema_name);\n      this.collection_name = this.$route.params.collectionname;\n      console.log(this.collection_name);\n      },\n    computed: {\n      ...mapGetters([\n        'getWax'\n      ]),\n      schemanames:function(){\n          return this.schema_name\n      },\n      collectionnames:function(){\n          return this.collectionname\n      }\n    }\n}\n</script> \n"]}]}