{"remainingRequest":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/CreateSale.vue?vue&type=style&index=0&id=5f8ea813&scoped=true&lang=css&","dependencies":[{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/CreateSale.vue","mtime":1609218731045},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/css-loader/dist/cjs.js","mtime":1609218724615},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1609218730647},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/postcss-loader/src/index.js","mtime":1609218727685},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1609218723950},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js","mtime":1609218730647}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouaGVhZGluZyB7CiAgcGFkZGluZy10b3A6IDIwcHg7CiAgZm9udC1zaXplOiAyMHB4Owp9Cg=="},{"version":3,"sources":["CreateSale.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;AACA;AACA;AACA","file":"CreateSale.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <p class=\"heading\">Listing Price</p>\n    <input v-model=\"price\" placeholder=\"Amount of Wax\">\n    <p class=\"heading\">Fee Summary</p>\n    <p>Collection Fee: {{ this.collectionFee * 100 }}%</p>\n    <p>Maker Marketplace Fee: {{ this.makerMarketPlaceFee * 100 }}%</p>\n    <p>Taker Marketplace Fee: {{ this.takerMarketPlaceFee * 100 }}%</p>\n    <p>You will receive {{ this.amount }} WAX</p>\n    <b-button id=\"confirm-button\" variant=\"success\" @click=\"emptyCheck\">Confirm</b-button>\n  </div>\n</template>\n\n\n<script>\nimport { bus } from '../event-bus.js';\nimport { mapGetters } from 'vuex'\nexport default {\n  name: 'CreateSale',\n  props: ['assetID', 'collectionFee'],\n  data() {\n    return {\n      price: \"\",\n      settlement_symbol: \"8,WAX\",\n      maker_marketplace: \"l5oaw.wam\",\n      recipient: \"atomicmarket\",\n      recipient_asset_ids: [],\n      memo: \"sale\",\n      makerMarketPlaceFee: 0.01,\n      takerMarketPlaceFee: 0.01\n    }\n  },\n  computed: {\n    listing_price: function () {\n      if(this.price!=\"\"){\n        var p = this.price\n        if(p.includes('.')){\n          var decimals = p.split('.')[1].length\n          for(var i=0; i<(8-decimals); i++){\n            p = p + \"0\"\n          }\n        }\n        else {\n          p = p + \".00000000\"\n        }\n        return p\n      }\n      else {\n        return 0.00000000\n      }\n    },\n    amount: function() {\n      //console.log(\"price: \" + this.price)\n      if(this.price!=\"\"){\n        return (Number(this.price) * (1 - Number(this.collectionFee) - Number(this.makerMarketPlaceFee) - Number(this.takerMarketPlaceFee)))\n      }\n      else {\n        return 0.00000000\n      }\n    },\n    ...mapGetters([\n      'getWax',\n      'getBlocksBehind',\n      'getExpireSeconds',\n    ])\n  },\n  methods: {\n    emptyCheck() {\n      if(this.price!=\"\"){\n        this.createSale()\n      }\n      else {\n        window.alert(\"Please enter the listing price\")\n      }\n    },\n    async createSale() {\n      if(!this.getWax.api) {\n        return console.log(\"Need to Login first\")\n      }\n      try {\n        bus.$emit('signing')\n        this.result = await this.getWax.api.transact({\n          actions: [{\n            account: 'atomicmarket',\n            name: 'announcesale',\n            authorization: [{\n              actor: this.getWax.userAccount,\n              permission: 'active',\n            }],\n            data: {\n              seller: this.getWax.userAccount,\n              asset_ids: [Number(this.assetID)],\n              listing_price: this.listing_price + \" WAX\",\n              settlement_symbol: this.settlement_symbol,\n              maker_marketplace: this.maker_marketplace,\n            },\n          },\n          {\n            account: 'atomicassets',\n            name: 'createoffer',\n            authorization: [{\n              actor: this.getWax.userAccount,\n              permission: 'active',\n            }],\n            data: {\n              sender: this.getWax.userAccount,\n              recipient: this.recipient,\n              sender_asset_ids: [Number(this.assetID)],\n              recipient_asset_ids: this.recipient_asset_ids,\n              memo: this.memo\n            },\n          }]\n        }, {\n          blocksBehind: this.getBlocksBehind,\n          expireSeconds: this.getExpireSeconds\n        })\n        //console.log(this.result)\n        bus.$emit('createSuccess',this.result.transaction_id)\n      }\n      catch (e) {\n        this.result = e\n        //console.log(e)\n        bus.$emit('createFailed',this.result)\n      }\n    },\n  },\n}\n</script>\n\n\n<style scoped>\n.heading {\n  padding-top: 20px;\n  font-size: 20px;\n}\n</style>\n"]}]}