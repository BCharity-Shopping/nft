{"remainingRequest":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/thread-loader/dist/cjs.js!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/store/index.js","dependencies":[{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/store/index.js","mtime":1605743292369},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKVnVlLnVzZShWdWV4KTsKZXhwb3J0IGRlZmF1bHQgbmV3IFZ1ZXguU3RvcmUoewogIHN0YXRlOiB7CiAgICB3YXg6ICIiLAogICAgYmxvY2tzQmVoaW5kOiAzLAogICAgZXhwaXJlU2Vjb25kczogMTIwMAogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBzdG9yZVdheDogZnVuY3Rpb24gc3RvcmVXYXgoc3RhdGUsIHdheE9iaikgewogICAgICBzdGF0ZS53YXggPSB3YXhPYmo7CiAgICAgIGNvbnNvbGUubG9nKHN0YXRlLndheCk7CiAgICB9LAogICAgY2xlYXJXYXg6IGZ1bmN0aW9uIGNsZWFyV2F4KHN0YXRlKSB7CiAgICAgIHN0YXRlLndheCA9ICIiOwogICAgfQogIH0sCiAgYWN0aW9uczoge30sCiAgbW9kdWxlczoge30sCiAgZ2V0dGVyczogewogICAgZ2V0V2F4OiBmdW5jdGlvbiBnZXRXYXgoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLndheDsKICAgIH0sCiAgICBnZXRJbW11dGFibGVEYXRhOiBmdW5jdGlvbiBnZXRJbW11dGFibGVEYXRhKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5JbW11dGFibGVfZGF0YTsKICAgIH0sCiAgICBnZXRCbG9ja3NCZWhpbmQ6IGZ1bmN0aW9uIGdldEJsb2Nrc0JlaGluZChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuYmxvY2tzQmVoaW5kOwogICAgfSwKICAgIGdldEV4cGlyZVNlY29uZHM6IGZ1bmN0aW9uIGdldEV4cGlyZVNlY29uZHMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmV4cGlyZVNlY29uZHM7CiAgICB9CiAgfQp9KTs="},{"version":3,"sources":["/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/store/index.js"],"names":["Vue","Vuex","use","Store","state","wax","blocksBehind","expireSeconds","mutations","storeWax","waxObj","console","log","clearWax","actions","modules","getters","getWax","getImmutableData","Immutable_data","getBlocksBehind","getExpireSeconds"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAGA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC1BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,GAAG,EAAE,EADF;AAEHC,IAAAA,YAAY,EAAE,CAFX;AAGHC,IAAAA,aAAa,EAAE;AAHZ,GADmB;AAM1BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,QADO,oBACGL,KADH,EACUM,MADV,EACiB;AACpBN,MAAAA,KAAK,CAACC,GAAN,GAAUK,MAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACC,GAAlB;AACH,KAJM;AAKPQ,IAAAA,QALO,oBAKET,KALF,EAKS;AACZA,MAAAA,KAAK,CAACC,GAAN,GAAU,EAAV;AACH;AAPM,GANe;AAgB1BS,EAAAA,OAAO,EAAE,EAhBiB;AAmB1BC,EAAAA,OAAO,EAAE,EAnBiB;AAsB1BC,EAAAA,OAAO,EAAE;AACLC,IAAAA,MAAM,EAAE,gBAAAb,KAAK,EAAI;AACb,aAAOA,KAAK,CAACC,GAAb;AACH,KAHI;AAILa,IAAAA,gBAAgB,EAAE,0BAAAd,KAAK,EAAE;AACrB,aAAOA,KAAK,CAACe,cAAb;AACH,KANI;AAOLC,IAAAA,eAAe,EAAE,yBAAAhB,KAAK,EAAI;AACtB,aAAOA,KAAK,CAACE,YAAb;AACD,KATE;AAULe,IAAAA,gBAAgB,EAAE,0BAAAjB,KAAK,EAAI;AACvB,aAAOA,KAAK,CAACG,aAAb;AACH;AAZI;AAtBiB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n\nexport default new Vuex.Store({\n    state: {\n        wax: \"\",\n        blocksBehind: 3,\n        expireSeconds: 1200,\n    },\n    mutations: {\n        storeWax (state, waxObj){\n            state.wax=waxObj\n            console.log(state.wax);\n        },\n        clearWax(state) {\n            state.wax=\"\"\n        },\n\n    },\n    actions: {\n\n    },\n    modules: {\n\n    },\n    getters: {\n        getWax: state => {\n            return state.wax\n        },\n        getImmutableData: state=>{\n            return state.Immutable_data\n        },\n        getBlocksBehind: state => {\n            return state.blocksBehind\n          },\n        getExpireSeconds: state => {\n            return state.expireSeconds\n        }\n    }\n})"]}]}