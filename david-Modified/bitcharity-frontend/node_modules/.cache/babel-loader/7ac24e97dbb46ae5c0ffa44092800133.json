{"remainingRequest":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/CreateAssets.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/CreateAssets.vue","mtime":1605576981600},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kYXZpZHNoZW4vRGVza3RvcC9CbG9ja0NoYWluL0JjaGFyaXR5LVZlcnNpb24yL2RhdmlkLU1vZGlmaWVkL2JpdGNoYXJpdHktZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvZGF2aWRzaGVuL0Rlc2t0b3AvQmxvY2tDaGFpbi9CY2hhcml0eS1WZXJzaW9uMi9kYXZpZC1Nb2RpZmllZC9iaXRjaGFyaXR5LWZyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwgZnJvbSAiL1VzZXJzL2Rhdmlkc2hlbi9EZXNrdG9wL0Jsb2NrQ2hhaW4vQmNoYXJpdHktVmVyc2lvbjIvZGF2aWQtTW9kaWZpZWQvYml0Y2hhcml0eS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIjsKCmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdCgpIHsKICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJxdWVyeSBjb2xsZWN0aW9uU2NoZW1hKCRzY2hlbWFfbmFtZTogU3RyaW5nKXtcbiAgICAgICAgICAgICAgICAgICAgYXRvbWljYXNzZXRzX3NjaGVtYXNfYWdncmVnYXRlKHdoZXJlOiB7c2NoZW1hX25hbWU6IHtfZXE6ICRzY2hlbWFfbmFtZX19KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlcyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9Il0pOwoKICBfdGVtcGxhdGVPYmplY3QgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7CiAgICByZXR1cm4gZGF0YTsKICB9OwoKICByZXR1cm4gZGF0YTsKfQoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgbWFwR2V0dGVycyB9IGZyb20gJ3Z1ZXgnOwppbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJzsKZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpbW11dGFibGVfZGF0YTogW10sCiAgICAgIHNjaGVtYV9uYW1lOiAiIiwKICAgICAgQXNzZXRPd25lcjogIiIsCiAgICAgIE51bWJlck9mQ29waWVzOiAiIiwKICAgICAgVGVtcGxhdGU6ICIiLAogICAgICBhdHRyaWJ1dGVfdGFibGU6IHRoaXMuZGF0YQogICAgfTsKICB9LAogIGFwb2xsbzogewogICAgYXR0cmlidXRlX3RhYmxlOiB7CiAgICAgIHF1ZXJ5OiBncWwoX3RlbXBsYXRlT2JqZWN0KCkpLAogICAgICB2YXJpYWJsZXM6IGZ1bmN0aW9uIHZhcmlhYmxlcygpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgc2NoZW1hX25hbWU6IHRoaXMuc2NoZW1hX25hbWUKICAgICAgICB9OwogICAgICB9LAogICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkYXRhKSB7CiAgICAgICAgcmV0dXJuIGRhdGEuYXRvbWljYXNzZXRzX3NjaGVtYXNfYWdncmVnYXRlLm5vZGVzWzBdLmZvcm1hdDsKICAgICAgfQogICAgfQogIH0sCiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50KCkgewogICAgdGhpcy5jb2xsZWN0aW9uX25hbWUgPSB0aGlzLiRyb3V0ZS5wYXJhbXMuY29sbGVjdG5hbWU7CiAgICB0aGlzLnNjaGVtYV9uYW1lID0gdGhpcy4kcm91dGUucGFyYW1zLnNjaGVtYU5hbWU7CiAgICBjb25zb2xlLmxvZygiY29sbGVjdGlvbiBuYW1lIGlzIiArIHRoaXMuY29sbGVjdGlvbl9uYW1lKTsKICAgIGNvbnNvbGUubG9nKCJ0aGUgc2NoZW1hIG5hbWUgaXMiICsgdGhpcy5zY2hlbWFfbmFtZSk7CiAgfSwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZCh7fSwgbWFwR2V0dGVycyhbJ2dldFdheCddKSksCiAgbWV0aG9kczogewogICAgQ3JlYXRlQXNzZXRzOiBmdW5jdGlvbiBDcmVhdGVBc3NldHMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBhcnJheSwgajsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBhcnJheSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIml0ZW0tbmFtZSIpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXJyYXkpOyAvL2NvbnNvbGUubG9nKHRoaXMuaW1tdXRhYmxlX2RhdGEpOwoKICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBhcnJheS5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygidGhpcyBpcyBhIGFycmF5IiArIGFycmF5W2pdLnBsYWNlaG9sZGVyKTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXJyYXlbal0ubmFtZSk7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJ0aGlzIGlzIGEgYXJyYXkiICsgYXJyYXlbal0udmFsdWUpOwoKICAgICAgICAgICAgICAgICAgaWYgKGFycmF5W2pdLnZhbHVlICE9ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW1tdXRhYmxlX2RhdGEucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAia2V5IjogYXJyYXlbal0ubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IFthcnJheVtqXS5wbGFjZWhvbGRlciwgYXJyYXlbal0udmFsdWVdCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygidGhpcyBpcyAiICsgX3RoaXMuaW1tdXRhYmxlX2RhdGEpOyAvL2NvbnNvbGUubG9nKCJ0aGlzIGlzIGEgYXJyYXkiK2FycmF5W2pdLnZhbHVlKTsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2codGhpcy5pbW11dGFibGVfZGF0YVtqXS52YWx1ZVswXSk7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRoaXMuaW1tdXRhYmxlX2RhdGEucHVzaCh7ImtleSI6dGhpcy5hdHRyaWJ1dGVfdGFibGVbaV0ubmFtZSwidmFsdWUiOlt0aGlzLmF0dHJpYnV0ZV90YWJsZVtpXS50eXBlLGFycmF5W2pdLnZhbHVlXX0pCiAgICAgICAgICAgICAgICAvLyAgICAgfQogICAgICAgICAgICAgICAgLy8gfQoKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF90aGlzLmltbXV0YWJsZV9kYXRhKTsKCiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZ2V0V2F4LmFwaSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgY29uc29sZS5sb2coIk5lZWQgdG8gbG9naW4gZmlyc3QiKSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA3OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmdldFdheC5hcGkudHJhbnNhY3QoewogICAgICAgICAgICAgICAgICBhY3Rpb25zOiBbewogICAgICAgICAgICAgICAgICAgIGFjY291bnQ6ICdhdG9taWNhc3NldHMnLAogICAgICAgICAgICAgICAgICAgIG5hbWU6ICdtaW50YXNzZXQnLAogICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IFt7CiAgICAgICAgICAgICAgICAgICAgICBhY3RvcjogX3RoaXMuZ2V0V2F4LnVzZXJBY2NvdW50LAogICAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbjogJ2FjdGl2ZScKICAgICAgICAgICAgICAgICAgICB9XSwKICAgICAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpemVkX21pbnRlcjogX3RoaXMuZ2V0V2F4LnVzZXJBY2NvdW50LAogICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbl9uYW1lOiBfdGhpcy5jb2xsZWN0aW9uX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICBpbW11dGFibGVfZGF0YTogX3RoaXMuaW1tdXRhYmxlX2RhdGEsCiAgICAgICAgICAgICAgICAgICAgICBtdXRhYmxlX2RhdGE6IFtdLAogICAgICAgICAgICAgICAgICAgICAgbmV3X2Fzc2V0X293bmVyOiBfdGhpcy5Bc3NldE93bmVyLAogICAgICAgICAgICAgICAgICAgICAgc2NoZW1hX25hbWU6IF90aGlzLnNjaGVtYV9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVfaWQ6IC0xLAogICAgICAgICAgICAgICAgICAgICAgdG9rZW5zX3RvX2JhY2s6IFtdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9XQogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICBibG9ja3NCZWhpbmQ6IDMsCiAgICAgICAgICAgICAgICAgIGV4cGlyZVNlY29uZHM6IDMwCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF90aGlzLnJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMzsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oNyk7CiAgICAgICAgICAgICAgICBfdGhpcy5yZXN1bHQgPSBfY29udGV4dC50MDsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbNywgMTNdXSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["CreateAssets.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <p>name is</p>\n        <p>{{collection_name}}</p>\n        <input v-model=\"AssetOwner\" placeholder=\"Account Name\"><br/>\n        <input v-model=\"NumberOfCopies\" placeholder=\"Number between 1-10\"><br/>\n        <input v-model=\"Template\" placeholder=\"Template\"><br/>\n        {{ attribute_table }}\n         <div v-for=\"(item) in attribute_table\" :key=\"item.name\">\n            {{item.name}}:<td><input :id=item.type class=\"item-name\" :name=item.name :placeholder=item.type></td>\n        </div>\n        <button class=\"button btn-primary\" @click=\"CreateAssets()\">Create Asset</button>\n    </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport gql from 'graphql-tag';\n\nexport default {\n   \n    data(){\n        return {\n            immutable_data:[],\n            schema_name:\"\",\n            AssetOwner:\"\",\n            NumberOfCopies:\"\",\n            Template:\"\",\n            attribute_table:this.data,\n        }\n    },\n    apollo:{\n        attribute_table: {\n            query: gql`query collectionSchema($schema_name: String){\n                    atomicassets_schemas_aggregate(where: {schema_name: {_eq: $schema_name}}) {\n                        nodes {\n                            format\n                        }\n                    }\n                }`,\n                variables(){\n                        return {\n                            schema_name: this.schema_name\n                        }\n                }, \n                update: data => data.atomicassets_schemas_aggregate.nodes[0].format,\n\n            }\n                  \n\n    },\n    beforeMount() {\n      this.collection_name = this.$route.params.collectname;\n      this.schema_name=this.$route.params.schemaName\n      console.log(\"collection name is\" + this.collection_name);\n      console.log(\"the schema name is\"+this.schema_name);\n    },\n    computed: {\n      ...mapGetters([\n        'getWax'\n      ]),\n    },\n    methods:{\n        async CreateAssets(){\n            var array=document.getElementsByClassName(\"item-name\")\n            console.log(array);\n            //console.log(this.immutable_data);\n            for(var j=0;j<array.length;j++){\n                    console.log(\"this is a array\"+array[j].placeholder);\n                    console.log(array[j].name)\n                    console.log(\"this is a array\"+array[j].value);\n                     if(array[j].value!=\"\"){\n                        this.immutable_data.push({\"key\":array[j].name,\"value\":[array[j].placeholder, array[j].value]})\n                     }\n                 }\n            console.log(\"this is \"+this.immutable_data);\n            //console.log(\"this is a array\"+array[j].value);\n            //         console.log(this.immutable_data[j].value[0]);\n            //         this.immutable_data.push({\"key\":this.attribute_table[i].name,\"value\":[this.attribute_table[i].type,array[j].value]})\n\n                    \n            //     }\n            // }\n            console.log(this.immutable_data);\n            if(!this.getWax.api){\n               return console.log(\"Need to login first\")\n           } \n           try {\n               this.result=await this.getWax.api.transact({\n                   actions:[{\n                    account: 'atomicassets',\n                    name: 'mintasset',\n                    authorization: [{\n                        actor: this.getWax.userAccount,\n                        permission:'active',\n                    }],\n                    data: {\n                        authorized_minter:this.getWax.userAccount,\n                        collection_name:this.collection_name,\n                        immutable_data:this.immutable_data,\n                        mutable_data:[],\n                        new_asset_owner:this.AssetOwner,\n                        schema_name:this.schema_name,\n                        template_id:-1,\n                        tokens_to_back:[\n\n                        ]\n                    },\n                }]\n               },{\n                   blocksBehind: 3,\n                   expireSeconds: 30\n               });\n           }\n           catch(e){\n               this.result=e\n               console.log(e)\n           } \n        }\n    },\n}\n\n</script>"],"sourceRoot":"src/components"}]}