{"remainingRequest":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/CreateTemplate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/CreateTemplate.vue","mtime":1605638739885},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kYXZpZHNoZW4vRGVza3RvcC9CbG9ja0NoYWluL0JjaGFyaXR5LVZlcnNpb24yL2RhdmlkLU1vZGlmaWVkL2JpdGNoYXJpdHktZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvZGF2aWRzaGVuL0Rlc2t0b3AvQmxvY2tDaGFpbi9CY2hhcml0eS1WZXJzaW9uMi9kYXZpZC1Nb2RpZmllZC9iaXRjaGFyaXR5LWZyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwgZnJvbSAiL1VzZXJzL2Rhdmlkc2hlbi9EZXNrdG9wL0Jsb2NrQ2hhaW4vQmNoYXJpdHktVmVyc2lvbjIvZGF2aWQtTW9kaWZpZWQvYml0Y2hhcml0eS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIjsKCmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdCgpIHsKICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJxdWVyeSBjb2xsZWN0aW9uU2NoZW1hKCRzY2hlbWFfbmFtZTogU3RyaW5nKXtcbiAgICAgICAgICAgICAgICAgICAgYXRvbWljYXNzZXRzX3NjaGVtYXNfYWdncmVnYXRlKHdoZXJlOiB7c2NoZW1hX25hbWU6IHtfZXE6ICRzY2hlbWFfbmFtZX19KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlcyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9Il0pOwoKICBfdGVtcGxhdGVPYmplY3QgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7CiAgICByZXR1cm4gZGF0YTsKICB9OwoKICByZXR1cm4gZGF0YTsKfQoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgbWFwR2V0dGVycyB9IGZyb20gJ3Z1ZXgnOwppbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdDcmVhdGVUZW1wbGF0ZScsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNvbGxlY3Rpb25fbmFtZTogIiIsCiAgICAgIHNjaGVtYV9uYW1lOiAiIiwKICAgICAgTWF4U3VwcGx5OiAiIiwKICAgICAgQnVybmVkOiBmYWxzZSwKICAgICAgVHJhbnNmZXJlZDogZmFsc2UsCiAgICAgIGltbXV0YWJsZV9kYXRhOiBbXQogICAgfTsKICB9LAogIGFwb2xsbzogewogICAgYXR0cmlidXRlX3RhYmxlOiB7CiAgICAgIHF1ZXJ5OiBncWwoX3RlbXBsYXRlT2JqZWN0KCkpLAogICAgICB2YXJpYWJsZXM6IGZ1bmN0aW9uIHZhcmlhYmxlcygpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgc2NoZW1hX25hbWU6IHRoaXMuc2NoZW1hX25hbWUKICAgICAgICB9OwogICAgICB9LAogICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkYXRhKSB7CiAgICAgICAgcmV0dXJuIGRhdGEuYXRvbWljYXNzZXRzX3NjaGVtYXNfYWdncmVnYXRlLm5vZGVzWzBdLmZvcm1hdDsKICAgICAgfQogICAgfQogIH0sCiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50KCkgewogICAgdGhpcy5jb2xsZWN0aW9uX25hbWUgPSB0aGlzLiRyb3V0ZS5wYXJhbXMuY29sbGVjdG5hbWU7CiAgICB0aGlzLnNjaGVtYV9uYW1lID0gdGhpcy4kcm91dGUucGFyYW1zLnNjaGVtYU5hbWU7CiAgfSwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZCh7fSwgbWFwR2V0dGVycyhbJ2dldFdheCddKSksCiAgbWV0aG9kczogewogICAgQ3JlYXRlVGVtcGxhdGU6IGZ1bmN0aW9uIENyZWF0ZVRlbXBsYXRlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgYXJyYXksIGo7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImNvbGxlY3Rpb24gbmFtZSBpcyAiICsgX3RoaXMuY29sbGVjdGlvbl9uYW1lKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJzY2hlbWEgbmFtZSBpcyAiICsgX3RoaXMuc2NoZW1hX25hbWUpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImF1dGhvcml6ZWQgY3JlYXRvciBpcyAiICsgX3RoaXMuZ2V0V2F4LnVzZXJBY2NvdW50KTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJidXJuYWJsZSBpcyAiICsgX3RoaXMuQnVybmVkKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJjb2xsZWN0aW9uIG5hbWUgaXMgIiArIF90aGlzLmNvbGxlY3Rpb25fbmFtZSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygibWF4IHN1cHBseSBpcyAiICsgX3RoaXMuTWF4U3VwcGx5KTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJUcmFuc2ZlcmFibGUgaXMgIiArIF90aGlzLlRyYW5zZmVyZWQpOwogICAgICAgICAgICAgICAgX3RoaXMuaW1tdXRhYmxlX2RhdGEgPSBbXTsKICAgICAgICAgICAgICAgIGFycmF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiaXRlbS1uYW1lIik7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhcnJheSk7CgogICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGFycmF5Lmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgIGlmIChhcnJheVtqXS5wbGFjZWhvbGRlciA9PSAiaW1hZ2UiKSB7CiAgICAgICAgICAgICAgICAgICAgYXJyYXlbal0ucGxhY2Vob2xkZXIgPSAic3RyaW5nIjsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgaWYgKGFycmF5W2pdLnZhbHVlICE9ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW1tdXRhYmxlX2RhdGEucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAia2V5IjogYXJyYXlbal0ubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IFthcnJheVtqXS5wbGFjZWhvbGRlciwgYXJyYXlbal0udmFsdWVdCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfdGhpcy5pbW11dGFibGVfZGF0YSk7CgogICAgICAgICAgICAgICAgaWYgKF90aGlzLmdldFdheC5hcGkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBjb25zb2xlLmxvZygiTmVlZCB0byBsb2dpbiBmaXJzdCIpKTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZXRXYXguYXBpLnRyYW5zYWN0KHsKICAgICAgICAgICAgICAgICAgYWN0aW9uczogW3sKICAgICAgICAgICAgICAgICAgICBhY2NvdW50OiAnYXRvbWljYXNzZXRzJywKICAgICAgICAgICAgICAgICAgICBuYW1lOiAnY3JlYXRldGVtcGwnLAogICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IFt7CiAgICAgICAgICAgICAgICAgICAgICBhY3RvcjogX3RoaXMuZ2V0V2F4LnVzZXJBY2NvdW50LAogICAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbjogJ2FjdGl2ZScKICAgICAgICAgICAgICAgICAgICB9XSwKICAgICAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpemVkX2NyZWF0b3I6IF90aGlzLmdldFdheC51c2VyQWNjb3VudCwKICAgICAgICAgICAgICAgICAgICAgIGJ1cm5hYmxlOiBfdGhpcy5CdXJuZWQsCiAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uX25hbWU6IF90aGlzLmNvbGxlY3Rpb25fbmFtZSwKICAgICAgICAgICAgICAgICAgICAgIGltbXV0YWJsZV9kYXRhOiBfdGhpcy5pbW11dGFibGVfZGF0YSwKICAgICAgICAgICAgICAgICAgICAgIG1heF9zdXBwbHk6IF90aGlzLk1heFN1cHBseSwKICAgICAgICAgICAgICAgICAgICAgIHNjaGVtYV9uYW1lOiBfdGhpcy5zY2hlbWFfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyYWJsZTogX3RoaXMuVHJhbnNmZXJlZAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgYmxvY2tzQmVoaW5kOiAzLAogICAgICAgICAgICAgICAgICBleHBpcmVTZWNvbmRzOiAzMAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBfdGhpcy5yZXN1bHQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI0OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjA7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDE0KTsKICAgICAgICAgICAgICAgIF90aGlzLnJlc3VsdCA9IF9jb250ZXh0LnQwOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQudDApOwoKICAgICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1sxNCwgMjBdXSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["CreateTemplate.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        {{ collection_name }}\n        {{ schema_name }}\n        <input v-model=\"MaxSupply\" placeholder=\"Max Supply\"><br/>\n        Asset can be burned:<input type=\"checkbox\" v-model=\"Burned\" v-bind:true-value=true v-bind:false-value=false>\n        Asset can be Transfered: <input type=\"checkbox\" v-model=\"Transfered\" v-bind:true-value=true v-bind:false-value=false>\n        <div v-for=\"(item) in attribute_table\" :key=\"item.name\">\n            {{item.name}}:<td><input :id=item.type class=\"item-name\" :name=item.name :placeholder=item.type></td>\n        </div>\n        <button class=\"button btn-primary\" @click=\"CreateTemplate()\">Create Template</button>\n    </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport gql from 'graphql-tag';\n\nexport default {\n   \n    name:'CreateTemplate',\n    \n    data(){\n        return {\n            collection_name:\"\",\n            schema_name:\"\",\n            MaxSupply:\"\",\n            Burned:false,\n            Transfered:false,\n            immutable_data:[],\n        }\n    },\n    apollo:{\n        attribute_table: {\n            query: gql`query collectionSchema($schema_name: String){\n                    atomicassets_schemas_aggregate(where: {schema_name: {_eq: $schema_name}}) {\n                        nodes {\n                            format\n                        }\n                    }\n                }`,\n                variables(){\n                        return {\n                            schema_name: this.schema_name\n                        }\n                }, \n                update: data => data.atomicassets_schemas_aggregate.nodes[0].format,\n\n            }\n    },\n    \n    beforeMount() {\n      this.collection_name = this.$route.params.collectname;\n      this.schema_name=this.$route.params.schemaName;\n    },\n    computed:{\n    ...mapGetters([\n        'getWax'\n      ]),\n    },\n    \n    \n    methods:{\n        async CreateTemplate(){\n            console.log(\"collection name is \"+this.collection_name);\n            console.log(\"schema name is \"+this.schema_name);\n            console.log(\"authorized creator is \"+this.getWax.userAccount);\n            console.log(\"burnable is \"+this.Burned);\n            console.log(\"collection name is \"+this.collection_name);\n            console.log(\"max supply is \"+this.MaxSupply);\n            console.log(\"Transferable is \"+this.Transfered);\n\n            this.immutable_data=[];\n            var array=document.getElementsByClassName(\"item-name\")\n            console.log(array);\n            for(var j=0;j<array.length;j++){\n                if(array[j].placeholder==\"image\"){\n                    array[j].placeholder=\"string\"\n                }\n                if(array[j].value!=\"\"){\n                    this.immutable_data.push({\"key\":array[j].name,\"value\":[array[j].placeholder, array[j].value]})\n                }\n            }\n            console.log(this.immutable_data);\n            if(!this.getWax.api){\n               return console.log(\"Need to login first\")\n            } \n            try {\n               this.result=await this.getWax.api.transact({\n                   actions:[{\n                    account: 'atomicassets',\n                    name: 'createtempl',\n                    authorization: [{\n                        actor: this.getWax.userAccount,\n                        permission:'active',\n                    }],\n                    data: {\n                        authorized_creator:this.getWax.userAccount,\n                        burnable:this.Burned,\n                        collection_name:this.collection_name,\n                        immutable_data:this.immutable_data,\n                        max_supply:this.MaxSupply,\n                        schema_name:this.schema_name,\n                        transferable:this.Transfered,\n                    },\n                }]\n               },{\n                   blocksBehind: 3,\n                   expireSeconds: 30\n               });\n           }\n           catch(e){\n               this.result=e\n               console.log(e)\n           } \n        }\n    }\n}\n</script>"],"sourceRoot":"src/components"}]}