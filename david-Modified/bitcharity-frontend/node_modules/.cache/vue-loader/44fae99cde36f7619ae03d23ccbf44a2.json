{"remainingRequest":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/CreateAssets.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/src/components/CreateAssets.vue","mtime":1605666373302},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/davidshen/Desktop/BlockChain/Bcharity-Version2/david-Modified/bitcharity-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZyc7CgpleHBvcnQgZGVmYXVsdCB7CiAgIAogICAgZGF0YSgpewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGltbXV0YWJsZV9kYXRhOltdLAogICAgICAgICAgICBzY2hlbWFfbmFtZToiIiwKICAgICAgICAgICAgQXNzZXRPd25lcjoiIiwKICAgICAgICAgICAgTnVtYmVyT2ZDb3BpZXM6IiIsCiAgICAgICAgICAgIHVzZV9UZW1wbGF0ZToiTm8gVGVtcGxhdGUiLAogICAgICAgIH0KICAgIH0sCiAgICBhcG9sbG86ewogICAgICAgIGF0dHJpYnV0ZV90YWJsZTogewogICAgICAgICAgICBxdWVyeTogZ3FsYHF1ZXJ5IGNvbGxlY3Rpb25TY2hlbWEoJHNjaGVtYV9uYW1lOiBTdHJpbmcpewogICAgICAgICAgICAgICAgICAgIGF0b21pY2Fzc2V0c19zY2hlbWFzX2FnZ3JlZ2F0ZSh3aGVyZToge3NjaGVtYV9uYW1lOiB7X2VxOiAkc2NoZW1hX25hbWV9fSkgewogICAgICAgICAgICAgICAgICAgICAgICBub2RlcyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH1gLAogICAgICAgICAgICAgICAgdmFyaWFibGVzKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2hlbWFfbmFtZTogdGhpcy5zY2hlbWFfbmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCAKICAgICAgICAgICAgICAgIHVwZGF0ZTogZGF0YSA9PiBkYXRhLmF0b21pY2Fzc2V0c19zY2hlbWFzX2FnZ3JlZ2F0ZS5ub2Rlc1swXS5mb3JtYXQsCgogICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIAoKICAgIH0sCiAgICBiZWZvcmVNb3VudCgpIHsKICAgICAgdGhpcy5jb2xsZWN0aW9uX25hbWUgPSB0aGlzLiRyb3V0ZS5wYXJhbXMuY29sbGVjdG5hbWU7CiAgICAgIHRoaXMuc2NoZW1hX25hbWU9dGhpcy4kcm91dGUucGFyYW1zLnNjaGVtYU5hbWUKICAgICAgY29uc29sZS5sb2coImNvbGxlY3Rpb24gbmFtZSBpcyIgKyB0aGlzLmNvbGxlY3Rpb25fbmFtZSk7CiAgICAgIGNvbnNvbGUubG9nKCJ0aGUgc2NoZW1hIG5hbWUgaXMiK3RoaXMuc2NoZW1hX25hbWUpOwogICAgfSwKICAgIG1vdW50ZWQoKXsKICAgICAgICB0aGlzLmFzc2V0X293bmVyPSIiCiAgICAgICAgdGhpcy5jb3BpZXM9IiIKICAgICAgICB0aGlzLmltbXV0YWJsZV9kYXRhPVtdCiAgICAgICAgdGhpcy51c2VyX3RlbXBsYXRlPSJObyBUZW1wbGF0ZSIKICAgIH0sCiAgICBjb21wdXRlZDogewogICAgICAuLi5tYXBHZXR0ZXJzKFsKICAgICAgICAnZ2V0V2F4JwogICAgICBdKSwKICAgIH0sCiAgICBtZXRob2RzOnsKICAgICAgICBhc3luYyBDcmVhdGVBc3NldHMoKXsKICAgICAgICAgICAgaWYodGhpcy51c2VfVGVtcGxhdGUhPSJObyBUZW1wbGF0ZSIpIHsKICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVfaWQgPSB0aGlzLnVzZVRlbXBsYXRlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5pbW11dGFibGVfZGF0YT1bXTsKICAgICAgICAgICAgdmFyIGFycmF5PWRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImZvcm1hdC1uYW1lIikKICAgICAgICAgICAgY29uc29sZS5sb2coYXJyYXkpOwogICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMuaW1tdXRhYmxlX2RhdGEpOwogICAgICAgICAgICBmb3IodmFyIGo9MDtqPGFycmF5Lmxlbmd0aDtqKyspewogICAgICAgICAgICAgICAgICAgIGlmKGFycmF5W2pdLnBsYWNlaG9sZGVyPT0iaW1hZ2UiKXsKICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbal0ucGxhY2Vob2xkZXI9InN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXJyYXlbal0udmFsdWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihhcnJheVtqXS52YWx1ZSE9IiIpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltbXV0YWJsZV9kYXRhLnB1c2goeyJrZXkiOmFycmF5W2pdLmlkLCJ2YWx1ZSI6W2FycmF5W2pdLnBsYWNlaG9sZGVyLCBhcnJheVtqXS52YWx1ZV19KQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zb2xlLmxvZygidGhpcyBpcyAiK3RoaXMuaW1tdXRhYmxlX2RhdGEpOwogICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmltbXV0YWJsZV9kYXRhKTsKICAgICAgICAgICAgaWYoIXRoaXMuZ2V0V2F4LmFwaSl7CiAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZygiTmVlZCB0byBsb2dpbiBmaXJzdCIpCiAgICAgICAgICAgfSAKICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICB0aGlzLnJlc3VsdD1hd2FpdCB0aGlzLmdldFdheC5hcGkudHJhbnNhY3QoewogICAgICAgICAgICAgICAgICAgYWN0aW9uczpbewogICAgICAgICAgICAgICAgICAgIGFjY291bnQ6ICdhdG9taWNhc3NldHMnLAogICAgICAgICAgICAgICAgICAgIG5hbWU6ICdtaW50YXNzZXQnLAogICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IFt7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdG9yOiB0aGlzLmdldFdheC51c2VyQWNjb3VudCwKICAgICAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbjonYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICB9XSwKICAgICAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcml6ZWRfbWludGVyOnRoaXMuZ2V0V2F4LnVzZXJBY2NvdW50LAogICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uX25hbWU6dGhpcy5jb2xsZWN0aW9uX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGltbXV0YWJsZV9kYXRhOnRoaXMuaW1tdXRhYmxlX2RhdGEsCiAgICAgICAgICAgICAgICAgICAgICAgIG11dGFibGVfZGF0YTpbXSwKICAgICAgICAgICAgICAgICAgICAgICAgbmV3X2Fzc2V0X293bmVyOnRoaXMuQXNzZXRPd25lciwKICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hX25hbWU6dGhpcy5zY2hlbWFfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVfaWQ6LTEsCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2Vuc190b19iYWNrOlsKCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgICAgfSx7CiAgICAgICAgICAgICAgICAgICBibG9ja3NCZWhpbmQ6IDMsCiAgICAgICAgICAgICAgICAgICBleHBpcmVTZWNvbmRzOiAzMAogICAgICAgICAgICAgICB9KTsKICAgICAgICAgICB9CiAgICAgICAgICAgY2F0Y2goZSl7CiAgICAgICAgICAgICAgIHRoaXMucmVzdWx0PWUKICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSkKICAgICAgICAgICB9IAogICAgICAgIH0KICAgIH0sCn0KCg=="},{"version":3,"sources":["CreateAssets.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CreateAssets.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <p>name is</p>\n        <p>{{collection_name}}</p>\n        <input v-model=\"AssetOwner\" placeholder=\"Account Name\"><br/>\n        <input v-model=\"NumberOfCopies\" placeholder=\"Number between 1-10\"><br/>\n        <input v-model=\"use_Template\" placeholder=\"Template\"><br/>\n        <!-- <div v-for=\"(item) in attribute_table\" :key=\"item.name\">\n            {{item.name}}:<td><input :id=item.type class=\"item-name\" :name=item.name :placeholder=item.type></td>\n        </div>-->\n\n        <ApolloQuery :query=\"require('../graphQL/atomicasset_templates.gql')\" :variables=\"{schema_name:this.schema_name,collection_name:this.collection_name}\">\n            <template v-slot=\"{ result: { loading, error, data } }\">\n                {{data}}\n                <div v-if=\"loading\" class=\"loading apollo\">Loading...</div>\n                <div v-else-if=\"error\" class=\"error apollo\">An error occurred</div>\n                <div v-else-if=\"data\" class=\"result apollo\">\n                    <select id=\"template\" v-model=\"use_Template\" >\n                        <option value=\"No Template\" selected>No Template</option>\n                        <option v-for=\"template in data.atomicassets_templates\" :key=\"template.template_id\" :value=\"template.template_id\">\n                            #{{template.template_id}} - ({{template.issued_supply}}/{{template.max_supply}}) {{template.immutable_data.name}}\n                        </option>\n                    </select>\n                    <div v-if=\"use_Template=='No Template'\">\n                        <div v-for=\"format in data.atomicassets_schemas[0].format\" :key=\"format.name\">\n                            <label :for=\"format.name\">{{format.name}}</label>\n                            <input :id=\"format.name\" class=\"format-name\" :name=\"format.name\" :placeholder=\"format.type\"> \n                            <br/>\n                        </div>\n                    </div>\n                    <div v-else>\n                        <div v-for=\"format in data.atomicassets_schemas[0].format\" :key=\"format.name\">\n                            <div v-for=\"template in data.atomicassets_templates\" :key=\"template.template_id\">\n                                <label v-if=\"template.template_id==use_Template\" :for=\"format.name\">{{format.name}}</label>\n                                <input v-if=\"template.template_id==use_Template && template.immutable_data[format.name]!=null\" :id=\"format.name\" :placeholder=\"template.immutable_data[format.name]\" disabled>\n                                <input v-else-if=\"template.template_id==use_Template\" class=\"format-name\" :id=\"format.name\" :placeholder=\"format.type\">\n                            </div>\n                        </div>\n                    <br>\n                    </div>\n                </div>\n            </template>\n        </ApolloQuery>\n        <button class=\"button btn-primary\" @click=\"CreateAssets()\">Create Asset</button>\n    </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport gql from 'graphql-tag';\n\nexport default {\n   \n    data(){\n        return {\n            immutable_data:[],\n            schema_name:\"\",\n            AssetOwner:\"\",\n            NumberOfCopies:\"\",\n            use_Template:\"No Template\",\n        }\n    },\n    apollo:{\n        attribute_table: {\n            query: gql`query collectionSchema($schema_name: String){\n                    atomicassets_schemas_aggregate(where: {schema_name: {_eq: $schema_name}}) {\n                        nodes {\n                            format\n                        }\n                    }\n                }`,\n                variables(){\n                        return {\n                            schema_name: this.schema_name\n                        }\n                }, \n                update: data => data.atomicassets_schemas_aggregate.nodes[0].format,\n\n            }\n                  \n\n    },\n    beforeMount() {\n      this.collection_name = this.$route.params.collectname;\n      this.schema_name=this.$route.params.schemaName\n      console.log(\"collection name is\" + this.collection_name);\n      console.log(\"the schema name is\"+this.schema_name);\n    },\n    mounted(){\n        this.asset_owner=\"\"\n        this.copies=\"\"\n        this.immutable_data=[]\n        this.user_template=\"No Template\"\n    },\n    computed: {\n      ...mapGetters([\n        'getWax'\n      ]),\n    },\n    methods:{\n        async CreateAssets(){\n            if(this.use_Template!=\"No Template\") {\n                this.template_id = this.useTemplate\n            }\n            this.immutable_data=[];\n            var array=document.getElementsByClassName(\"format-name\")\n            console.log(array);\n            //console.log(this.immutable_data);\n            for(var j=0;j<array.length;j++){\n                    if(array[j].placeholder==\"image\"){\n                        array[j].placeholder=\"string\"\n                        console.log(array[j].value);\n                    }\n                    if(array[j].value!=\"\"){\n                        this.immutable_data.push({\"key\":array[j].id,\"value\":[array[j].placeholder, array[j].value]})\n                     }\n                 }\n            console.log(\"this is \"+this.immutable_data);\n            console.log(this.immutable_data);\n            if(!this.getWax.api){\n               return console.log(\"Need to login first\")\n           } \n           try {\n               this.result=await this.getWax.api.transact({\n                   actions:[{\n                    account: 'atomicassets',\n                    name: 'mintasset',\n                    authorization: [{\n                        actor: this.getWax.userAccount,\n                        permission:'active',\n                    }],\n                    data: {\n                        authorized_minter:this.getWax.userAccount,\n                        collection_name:this.collection_name,\n                        immutable_data:this.immutable_data,\n                        mutable_data:[],\n                        new_asset_owner:this.AssetOwner,\n                        schema_name:this.schema_name,\n                        template_id:-1,\n                        tokens_to_back:[\n\n                        ]\n                    },\n                }]\n               },{\n                   blocksBehind: 3,\n                   expireSeconds: 30\n               });\n           }\n           catch(e){\n               this.result=e\n               console.log(e)\n           } \n        }\n    },\n}\n\n</script>"]}]}